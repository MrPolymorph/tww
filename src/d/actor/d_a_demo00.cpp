//
// Generated by dtk
// Translation Unit: d_a_demo00.cpp
//
//#include "d/d_demo.h"
#include "f_op/f_op_actor_mng.h"
#include "m_Do/m_Do_ext.h"
#include "d/d_kankyo_wether.h"
#include "m_Do/m_Do_mtx.h"
#include "m_Do/m_Do_graphic.h"
#include "JSystem/JUtility/JUTTexture.h"

class daDemo00_c : fopAc_ac_c {
public:
    ~daDemo00_c();
    void setBaseMtx();
    void setShadowSize();
    void createHeap();
    void actStandby(dDemo_actor_c*);
    void actPerformance(dDemo_actor_c*);
    int actLeaving(dDemo_actor_c*);
    void draw();
    void execute();
public:
    /* 0x290 */ dDemo_actor_c* field_0x290;
    /* 0x294 */ u32 field_0x294;
    /* 0x295 */ void (daDemo00_c::* PTR_actStandby_8038b05c)(dDemo_actor_c*);
    /* 0x296 */ u32 field_0x296[0x13];
    /* 0x2f0 */ mDoExt_McaMorf* field_0x2f0;
    /* 0x2f4 */ Mtx* mMtx;
};

struct daDemo00_resID_c {
public:
    void reset();
public:
    u32 field_0x00[0xA];
}; /* size 0x24 */

struct daDemo00_model_c {
public:
    void reset();
public:
    /* 0x00 */ daDemo00_resID_c field_0x00;
    /* 0x24 */ DEMO_PLIGHT* demoPlight;
};

/* 800E595C-800E598C       .text reset__16daDemo00_resID_cFv */
void daDemo00_resID_c::reset() {
    field_0x00[0] = 0xffffffff;
    field_0x00[1] = 0xffffffff;
    field_0x00[2] = 0xffffffff;
    field_0x00[3] = 0xffffffff;
    field_0x00[4] = 0xffffffff;
    field_0x00[5] = 0xffffffff;
    field_0x00[6] = 0xffffffff;
    field_0x00[7] = 0xffffffff;
    field_0x00[8] = 0xffffffff;
    field_0x00[9] = 0xffffffff;
}

/* 800E598C-800E59EC       .text reset__16daDemo00_model_cFv */
void daDemo00_model_c::reset() {
    field_0x00.reset();
    demoPlight->field_0x00 = 0;
    if (demoPlight != 0) {
        dKydm_demo_plight_delete(demoPlight);
    }
    return;
}

/* 800E59EC-800E5A60       .text __dt__10daDemo00_cFv */
daDemo00_c::~daDemo00_c() {
    if (this->heap != 0) {
        if (field_0x2f0 != NULL) {
            field_0x2f0->stopZelAnime();
        }
    }
}

/* 800E5A60-800E5AFC       .text setBaseMtx__10daDemo00_cFv */
void daDemo00_c::setBaseMtx() {
    //model->setBaseTRMtx(mDoMtx_stack_c::get());
    //static cXyz l_offset(0.0f, 30.0f, 0.0f);
    mDoMtx_stack_c::transS(current.pos);
    mDoMtx_stack_c::ZXYrotM(shape_angle);
    //mDoMtx_stack_c::copy(*mMtx);
    //mDoMtx_stack_c::transM(l_offset);
    //field_0x2f0->calc();
}

/* 800E5AFC-800E5DEC       .text setShadowSize__10daDemo00_cFv */
void daDemo00_c::setShadowSize() {
    /* Nonmatching */
}

/* 800E5DEC-800E5FF4       .text awaCheck__FP8J3DModel */
int awaCheck(J3DModel* j3DModel) {
    /* Nonmatching */
    u32 idx;
    ResTIMG * frameBufferTiming;
    const char* nameTableName;
    const char* puVar2;
    bool success;
    J3DSkinDeform *skinDeform;
    ResTIMG restImg;
    const ResTIMG* frameBufferTimer;
    u16 index;
    JUTNameTab * textureName;
    JUTNameTab * materialName;
    J3DModelData * modelData;

    modelData = j3DModel->mModelData;
    materialName = modelData->getMaterialTable().getMaterialName();
    textureName = modelData->getMaterialTable().getTextureName();

    if (materialName != NULL && textureName != NULL) {
        for (index = 0; index < materialName->getResNameTable()->mEntryNum; index++) {
            nameTableName = textureName->getName(index);
            success = strcmp(nameTableName,"B_dummy");
            if ((success == 0) || (success = strcmp(nameTableName,"cy_kankyo"), success == 0)) {
                skinDeform = new J3DSkinDeform();
                if (skinDeform != NULL) {
                    j3DModel->setSkinDeform(skinDeform, 1);
                }
                if (skinDeform == NULL) {
                    return 0;
                }
                success = j3DModel->setSkinDeform(skinDeform, 1);
                if (success != 0) {
                    return 0;
                }
                success = strcmp(nameTableName,"B_dummy");
                frameBufferTimer = mDoGph_gInf_c::mFrameBufferTimg;
                if (success == 0) {
                    restImg.format = frameBufferTimer->format;
                    restImg.alphaEnabled = frameBufferTimer->alphaEnabled;
                    restImg.width = frameBufferTimer->width;
                    restImg.height = frameBufferTimer->height;
                    restImg.wrapS = frameBufferTimer->wrapS;
                    restImg.wrapT = frameBufferTimer->wrapT;
                    restImg.indexTexture = frameBufferTimer->indexTexture;
                    restImg.colorFormat = frameBufferTimer->colorFormat;
                    restImg.numColors = frameBufferTimer->numColors;
                    restImg.paletteOffset = frameBufferTimer->paletteOffset;
                    restImg.mipmapEnabled = frameBufferTimer->mipmapEnabled;
                    restImg.doEdgeLOD = frameBufferTimer->doEdgeLOD;
                    restImg.biasClamp = frameBufferTimer->biasClamp;
                    restImg.maxAnisotropy = frameBufferTimer->maxAnisotropy;
                    restImg.minFilter = frameBufferTimer->minFilter;
                    restImg.magFilter = frameBufferTimer->magFilter;
                    restImg.minLOD = frameBufferTimer->minLOD;
                    restImg.maxLOD = frameBufferTimer->maxLOD;
                    restImg.mipmapCount = frameBufferTimer->mipmapCount;
                    restImg.unknown = frameBufferTimer->unknown;
                    restImg.LODBias = frameBufferTimer->LODBias;
                    restImg.imageOffset = frameBufferTimer->imageOffset;
//                    pRVar3 = textureNameTable->mpRes + uVar1 * 4;
//                    *(int *)pRVar3[3].mEntries =
//                        (int)frameBufferTimer + (*(int *)pRVar3[3].mEntries - (int)pRVar3);
//                    pRVar3 = textureNameTable->mpRes + uVar1 * 4;
//                    *(int *)pRVar3[1].mEntries =
//                        (int)frameBufferTimer + (*(int *)pRVar3[1].mEntries - (int)pRVar3);
//                    m_Do_ext::mDoExt_modelTexturePatch(modelData);
                }
            }
        }
    }
    return 1;
}

/* 800E5FF4-800E6014       .text createHeapCallBack__FP10fopAc_ac_c */
void createHeapCallBack(fopAc_ac_c* i_this) {
    daDemo00_c* a_this = (daDemo00_c*)i_this;
    a_this->createHeap();
}

/* 800E6014-800E6620       .text createHeap__10daDemo00_cFv */
void daDemo00_c::createHeap() {
    /* Nonmatching */
}

/* 800E6620-800E6758       .text actStandby__10daDemo00_cFP13dDemo_actor_c */
void daDemo00_c::actStandby(dDemo_actor_c*) {
    /* Nonmatching */
}

/* 800E6758-800E6E2C       .text actPerformance__10daDemo00_cFP13dDemo_actor_c */
void daDemo00_c::actPerformance(dDemo_actor_c*) {
    /* Nonmatching */
}

/* 800E6E2C-800E6E90       .text actLeaving__10daDemo00_cFP13dDemo_actor_c */
int daDemo00_c::actLeaving(dDemo_actor_c* a_this) {
    /* Nonmatching */
    u32 uVar1;
    dDemo_actor_c *extraout_r4;

    if (field_0x2f0 != NULL) {
        field_0x2f0->stopZelAnime();
        //param_1 = extraout_r4;
    }
    fopAcM_DeleteHeap(this);
    uVar1 = 0xFFFFFFFF;
    field_0x290 = 0;
    field_0x290 = 0;
    field_0x294 = uVar1;
    PTR_actStandby_8038b05c = &actStandby;
    return 1;
}

/* 800E6E90-800E6EB0       .text daDemo00_Draw__FP10daDemo00_c */
void daDemo00_Draw(daDemo00_c* a_this) {
    a_this->draw();
}

/* 800E6EB0-800E7204       .text draw__10daDemo00_cFv */
void daDemo00_c::draw() {
    /* Nonmatching */
}

/* 800E7204-800E7224       .text daDemo00_Execute__FP10daDemo00_c */
void daDemo00_Execute(daDemo00_c* a_this) {
    a_this->execute();
}

/* 800E7224-800E78A0       .text execute__10daDemo00_cFv */
void daDemo00_c::execute() {
    /* Nonmatching */
}

/* 800E78A0-800E78A8       .text daDemo00_IsDelete__FP10daDemo00_c */
static BOOL daDemo00_IsDelete(daDemo00_c*) {
    return true;
}

/* 800E78A8-800E78D0       .text daDemo00_Delete__FP10daDemo00_c */
static BOOL daDemo00_Delete(daDemo00_c* a_this) {
    a_this->~daDemo00_c();
    return true;
}

/* 800E78D0-800E7964       .text daDemo00_Create__FP10fopAc_ac_c */
void daDemo00_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

