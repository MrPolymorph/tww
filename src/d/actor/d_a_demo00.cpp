//
// Generated by dtk
// Translation Unit: d_a_demo00.cpp
//
//#include "d/d_demo.h"
#include "f_op/f_op_actor_mng.h"
#include "m_Do/m_Do_ext.h"
#include "d/d_kankyo_wether.h"
#include "m_Do/m_Do_mtx.h"
#include "m_Do/m_Do_graphic.h"
#include "JSystem/JUtility/JUTTexture.h"

class daDemo00_c : fopAc_ac_c {
public:
    ~daDemo00_c();
    void setBaseMtx();
    void setShadowSize();
    void createHeap();
    void actStandby(dDemo_actor_c*);
    void actPerformance(dDemo_actor_c*);
    int actLeaving(dDemo_actor_c*);
    void draw();
    void execute();
public:
    /* 0x290 */ dDemo_actor_c* field_0x290;
    /* 0x294 */ u32 field_0x294[0x17];
    /* 0x2f0 */ mDoExt_McaMorf* field_0x2f0;
    /* 0x2f4 */ Mtx* mMtx;
};

struct daDemo00_resID_c {
public:
    void reset();
public:
    u32 field_0x00[0xA];
}; /* size 0x24 */

struct daDemo00_model_c {
public:
    void reset();
public:
    /* 0x00 */ daDemo00_resID_c field_0x00;
    /* 0x24 */ DEMO_PLIGHT* demoPlight;
};

/* 800E595C-800E598C       .text reset__16daDemo00_resID_cFv */
void daDemo00_resID_c::reset() {
    field_0x00[0] = 0xffffffff;
    field_0x00[1] = 0xffffffff;
    field_0x00[2] = 0xffffffff;
    field_0x00[3] = 0xffffffff;
    field_0x00[4] = 0xffffffff;
    field_0x00[5] = 0xffffffff;
    field_0x00[6] = 0xffffffff;
    field_0x00[7] = 0xffffffff;
    field_0x00[8] = 0xffffffff;
    field_0x00[9] = 0xffffffff;
}

/* 800E598C-800E59EC       .text reset__16daDemo00_model_cFv */
void daDemo00_model_c::reset() {
    field_0x00.reset();
    demoPlight->field_0x00 = 0;
    if (demoPlight != 0) {
        dKydm_demo_plight_delete(demoPlight);
    }
    return;
}

/* 800E59EC-800E5A60       .text __dt__10daDemo00_cFv */
daDemo00_c::~daDemo00_c() {
    if (this->heap != 0) {
        if (field_0x2f0 != NULL) {
            field_0x2f0->stopZelAnime();
        }
    }
}

/* 800E5A60-800E5AFC       .text setBaseMtx__10daDemo00_cFv */
void daDemo00_c::setBaseMtx() {
    //model->setBaseTRMtx(mDoMtx_stack_c::get());
    //static cXyz l_offset(0.0f, 30.0f, 0.0f);
    mDoMtx_stack_c::transS(current.pos);
    mDoMtx_stack_c::ZXYrotM(shape_angle);
    //mDoMtx_stack_c::copy(*mMtx);
    //mDoMtx_stack_c::transM(l_offset);
    //field_0x2f0->calc();
}

/* 800E5AFC-800E5DEC       .text setShadowSize__10daDemo00_cFv */
void daDemo00_c::setShadowSize() {
    /* Nonmatching */
}

/* 800E5DEC-800E5FF4       .text awaCheck__FP8J3DModel */
int awaCheck(J3DModel* j3DModel) {
    /* Nonmatching */
    u32 uVar1;
    ResTIMG * frameBufferTiming;
    const char * nameTableName;
    int iVar3;
    J3DSkinDeform *skinDeform;
    const ResNTAB * resNtab;
    u16 index;
    JUTNameTab * nameTable;
    JUTNameTab * materialName;
    J3DModelData * modelData;

    modelData = j3DModel->mModelData;
    materialName = (modelData->getMaterialTable()).getMaterialName();
    if ((materialName != (JUTNameTab *)0x0) &&
        (nameTable = modelData->getMaterialName(), nameTable != NULL)) {
        for (index = 0; index < *(u16 *)&materialName->vtbl; index++) {
            nameTableName = nameTable->getName(index);
            iVar3 = strcmp(nameTableName,"B_dummy");
            if ((iVar3 == 0) || (iVar3 = strcmp(nameTableName,"cy_kankyo"), iVar3 == 0)) {
                skinDeform = new J3DSkinDeform();
                if (skinDeform != NULL) {
                    j3DModel->setSkinDeform(skinDeform, 1);
                }
                if (skinDeform == NULL) {
                    return 0;
                }
                iVar3 = j3DModel->setSkinDeform(skinDeform, 1);
                if (iVar3 != 0) {
                    return 0;
                }
                iVar3 = strcmp(nameTableName,"B_dummy");
                frameBufferTiming = mDoGph_gInf_c::mFrameBufferTimg;
                if (iVar3 == 0) {
                    uVar1 = index;
                    resNtab = materialName->getResNameTable();
                    *(GXTexFmt *)&resNtab->mCount = mDoGph_gInf_c::mFrameBufferTimg->format;
                    *(byte *)((int)&resNtab->mCount + 1) = frameBufferTiming->mTranslucency;
                    resNtab->field1_0x2 = frameBufferTiming->mWidth;
                    resNtab->mEntries[0] = frameBufferTiming->mHeight;
                    *(GXTexWrapMode *)(resNtab->mEntries + 1) = frameBufferTiming->mWrapS;
                    *(GXTexWrapMode *)((int)resNtab->mEntries + 3) = frameBufferTiming->mWrapT;
                    *(byte *)&resNtab[1].mCount = frameBufferTiming->mbHasTlut;
                    *(GXTlutFmt *)((int)&resNtab[1].mCount + 1) = frameBufferTiming->mTlutFmt;
                    resNtab[1].field1_0x2 = frameBufferTiming->mTlutCount;
                    *(int *)resNtab[1].mEntries = frameBufferTiming->mTlutDataOffs;
                    *(byte *)&resNtab[2].mCount = frameBufferTiming->mbMipmapEnabled;
                    *(byte *)((int)&resNtab[2].mCount + 1) = frameBufferTiming->mbDoEdgeLOD;
                    *(byte *)&resNtab[2].field1_0x2 = frameBufferTiming->mbBiasClamp;
                    *(byte *)((int)&resNtab[2].field1_0x2 + 1) = frameBufferTiming->mMaxAniso;
                    *(GXTexFilter *)resNtab[2].mEntries = frameBufferTiming->mMinFilter;
                    *(GXTexFilter *)((int)resNtab[2].mEntries + 1) = frameBufferTiming->mMagFilter;
                    *(byte *)(resNtab[2].mEntries + 1) = frameBufferTiming->mMinLOD;
                    *(byte *)((int)resNtab[2].mEntries + 3) = frameBufferTiming->mMaxLOD;
                    *(byte *)&resNtab[3].mCount = frameBufferTiming->mMipmapCount;
                    *(byte *)((int)&resNtab[3].mCount + 1) = frameBufferTiming->field19_0x19;
                    resNtab[3].field1_0x2 = frameBufferTiming->mLODBias;
                    *(int *)resNtab[3].mEntries = frameBufferTiming->mTexDataOffs;
                    resNtab = materialName->mpRes + uVar1 * 4;
                    *(int *)resNtab[3].mEntries = (int)frameBufferTiming + (*(int *)resNtab[3].mEntries - (int)resNtab);
                    resNtab = materialName->mpRes + uVar1 * 4;
                    *(int *)resNtab[1].mEntries = (int)frameBufferTiming + (*(int *)resNtab[1].mEntries - (int)resNtab);
                    mDoExt_modelTexturePatch(modelData);
                }
            }
        }
    }
    return 1;
}

/* 800E5FF4-800E6014       .text createHeapCallBack__FP10fopAc_ac_c */
void createHeapCallBack(fopAc_ac_c* i_this) {
    daDemo00_c* a_this = (daDemo00_c*)i_this;
    a_this->createHeap();
}

/* 800E6014-800E6620       .text createHeap__10daDemo00_cFv */
void daDemo00_c::createHeap() {
    /* Nonmatching */
}

/* 800E6620-800E6758       .text actStandby__10daDemo00_cFP13dDemo_actor_c */
void daDemo00_c::actStandby(dDemo_actor_c*) {
    /* Nonmatching */
}

/* 800E6758-800E6E2C       .text actPerformance__10daDemo00_cFP13dDemo_actor_c */
void daDemo00_c::actPerformance(dDemo_actor_c*) {
    /* Nonmatching */
}

/* 800E6E2C-800E6E90       .text actLeaving__10daDemo00_cFP13dDemo_actor_c */
int daDemo00_c::actLeaving(dDemo_actor_c* a_this) {
    /* Nonmatching */
    u32 uVar1;
    dDemo_actor_c *extraout_r4;

    if (field_0x2f0 != NULL) {
        field_0x2f0->stopZelAnime();
        //param_1 = extraout_r4;
    }
    fopAcM_DeleteHeap(this);
    uVar1 = 0xFFFFFFFF;
    field_0x290 = 0;
    //*(undefined4 *)(this + 0x290) = d_a_demo00::@4760;
    field_0x294[1] = uVar1;
    //*(undefined **)(this + 0x298) = PTR_actStandby_8038b05c;
    return 1;
}

/* 800E6E90-800E6EB0       .text daDemo00_Draw__FP10daDemo00_c */
void daDemo00_Draw(daDemo00_c* a_this) {
    a_this->draw();
}

/* 800E6EB0-800E7204       .text draw__10daDemo00_cFv */
void daDemo00_c::draw() {
    /* Nonmatching */
}

/* 800E7204-800E7224       .text daDemo00_Execute__FP10daDemo00_c */
void daDemo00_Execute(daDemo00_c* a_this) {
    a_this->execute();
}

/* 800E7224-800E78A0       .text execute__10daDemo00_cFv */
void daDemo00_c::execute() {
    /* Nonmatching */
}

/* 800E78A0-800E78A8       .text daDemo00_IsDelete__FP10daDemo00_c */
static BOOL daDemo00_IsDelete(daDemo00_c*) {
    return true;
}

/* 800E78A8-800E78D0       .text daDemo00_Delete__FP10daDemo00_c */
static BOOL daDemo00_Delete(daDemo00_c* a_this) {
    a_this->~daDemo00_c();
    return true;
}

/* 800E78D0-800E7964       .text daDemo00_Create__FP10fopAc_ac_c */
void daDemo00_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

