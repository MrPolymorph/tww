//
// Generated by dtk
// Translation Unit: d_a_kytag00.cpp
//
#include "JSystem/JKernel/JKRHeap.h"
#include "d/d_com_inf_game.h"
#include "f_op/f_op_actor.h"
#include "f_op/f_op_camera_mng.h"
#include "d/d_kankyo.h"
#include "d/d_procname.h"
#include "JSystem/JMath/JMath.h"
#include "d/actor/d_a_player_link.h"
#include "dolphin/types.h"

class kytag00_class : public fopAc_ac_c {
public:
    /* 0x00 */ u8 field_0x00;
    /* 0x01 */ u8 field_0x01;
    /* 0x02 */ u8 field_0x02;
    /* 0x03 */ u8 field_0x03;
    /* 0x04 */ u8 mbEfSet;
    /* 0x05 */ u8 mbPselSet;
    /* 0x06 */ u8 field_0x06;
    /* 0x07 */ u8 mPSelldx;
    /* 0x08 */ u8 mEffectMode;
    /* 0x09 */ u8 field_0x09;
    /* 0x0A */ u8 field_0x0A;
    /* 0x0B */ u8 field_0x0B;
    /* 0x0C */ u32 mParamRadius;
    /* 0x10 */ u32 mInnerFadeY;
    /* 0x14 */ f32 mInnerRadius;
    /* 0x18 */ f32 mOuterRadius;
    /* 0x1C */ f32 mTarget;
    /* 0x20 */ u8 mSwitchId;
    /* 0x21 */ u8 mbInvert;
    /* 0x22 */ u8 mbAlwaysCheckPlayerPos;
    /* 0x23 */ cXyz* whoKnows;
}; // Size: 0x27

/* 00000078-0000024C       .text get_check_pos__FP13kytag00_class */
void get_check_pos(kytag00_class* i_this) {
    /* Nonmatching */
    double fVar1;
    double fVar2;
    double fVar3;
    daPy_py_c *mpPlayer;
    camera_class *mpCamera;
    cXyz *local_40;

    mpCamera = g_dComIfG_gameInfo.play.mCameraInfo[0].mpCamera;
    mpPlayer = g_dComIfG_gameInfo.play.mpPlayer[0];

    fVar2 = PSVECSquareDistance(&i_this->current.pos, &mpCamera->mLookat.mEye);

    if (fVar1 > 0.0) {
        fVar3 = __frsqrte(fVar2) / 1.0;
        fVar3 *= 0.5 * (3.0 - fVar2 * fVar3 * fVar3);
        fVar3 *= 0.5 * (3.0 - fVar2 * fVar3 * fVar3);
        fVar2 *= fVar3 * 0.5 * (3.0 - fVar2 * fVar3 * fVar3);
    }
    fVar3 = PSVECSquareDistance(&i_this->current.pos, &mpPlayer->current.pos);
    if (fVar3 > 0.0) {
        fVar1 = fVar1 * 0.5 * (3.0 - fVar3 * fVar1 * fVar1);
        fVar1 = fVar1 * 0.5 * (3.0 - fVar3 * fVar1 * fVar1);
        fVar3 = fVar3 * fVar1 * 0.5 * (3.0 - fVar3 * fVar1 * fVar1);
    }
    if ((g_dComIfG_gameInfo.play.mEvtCtrl.mMode == 0) ||
        (i_this->mbAlwaysCheckPlayerPos == 0)) {
        local_40->x = mpPlayer->current.pos.x;
        local_40->y = mpPlayer->current.pos.y;
        local_40->z = mpPlayer->current.pos.z;
    }
    else if (fVar3 <= fVar2) {
        local_40->x = mpPlayer->current.pos.x;
        local_40->y = mpPlayer->current.pos.y;
        local_40->z = mpPlayer->current.pos.z;
    }
    else {
        local_40->x = mpCamera->mLookat.mEye.x;
        local_40->y = mpCamera->mLookat.mEye.y;
        local_40->z = mpCamera->mLookat.mEye.z;
    }
    i_this->whoKnows->x = local_40->x;
    i_this->whoKnows->y = local_40->y;
    i_this->whoKnows->z = local_40->z;
}

/* 0000024C-000005E4       .text wether_tag_move__FP13kytag00_class */
BOOL wether_tag_move(kytag00_class*) {
    /* Nonmatching */
    return 1;
}

/* 000005E4-000006A0       .text raincnt_set__Ff */
void raincnt_set(float flt) {
    /* Nonmatching */
    s32 rainCount = 0;
    s32 temp;

    if (dKy_checkEventNightStop() != 0) {
        temp = (250.0f * (flt * (flt * flt)));
        if (g_env_light.mRainCount < temp) {
            rainCount = g_env_light.mRainCount;
        }
    } else {
        rainCount = (250.0f * (flt * (flt * flt)));
    }
    if (rainCount > g_env_light.mRainCountOrig) {
        g_env_light.mRainCount = rainCount;
    }
}

/* 000006A0-000006D8       .text raincnt_cut__Fv */
void raincnt_cut() {
    if (dKy_checkEventNightStop() == 0) {
        g_env_light.mRainCount = g_env_light.mRainCountOrig;
    }
}

/* 000006D8-00000C0C       .text wether_tag_efect_move__FP13kytag00_class */
BOOL wether_tag_efect_move(kytag00_class*) {
    /* Nonmatching */
    return 1;
}

/* 00000C0C-00000C30       .text daKytag00_Draw__FP13kytag00_class */
BOOL daKytag00_Draw(kytag00_class* i_this) {
    wether_tag_efect_move(i_this);
    return true;
}

/* 00000C30-00000D44       .text daKytag00_Execute__FP13kytag00_class */
BOOL daKytag00_Execute(kytag00_class* i_this) {
  bool bVar1;
  
  if (i_this->mbInvert == 0) {
    if (i_this->mSwitchId == 0xff || dComIfGs_isSwitch(dStage_roomControl_c::mStayNo, dStage_roomControl_c::mStayNo)) {
      cLib_addCalc(&i_this->mTarget, 1.0f, 0.1f, 0.01f, 0.0001);
    }
    else {
      cLib_addCalc(&i_this->mTarget, 0.0f, 0.1f, 0.01f, 0.0001);
    }
  }
  else if ((i_this->mSwitchId == 0xff) || dComIfGs_isSwitch(dStage_roomControl_c::mStayNo, dStage_roomControl_c::mStayNo)) {
    cLib_addCalc(&i_this->mTarget, 0.0f, 0.1f, 0.01f, 0.0001);
  }
  else {
    cLib_addCalc(&i_this->mTarget, 1.0f, 0.1f, 0.01f, 0.0001);
  }
  wether_tag_move(i_this);
  return 1;
}

/* 00000D44-00000D4C       .text daKytag00_IsDelete__FP13kytag00_class */
BOOL daKytag00_IsDelete(kytag00_class*) {
    return true;
}

/* 00000D4C-00000D64       .text daKytag00_Delete__FP13kytag00_class */
BOOL daKytag00_Delete(kytag00_class*) {
    g_env_light.mMoyaCount = 0;
    return true;
}

/* 00000D64-00000F8C       .text daKytag00_Create__FP10fopAc_ac_c */
int daKytag00_Create(fopAc_ac_c* i_this) {
    /* Nonmatching */
    bool bVar1;
    fopAcM_SetupActor(i_this, kytag00_class);
    kytag00_class* tag = (kytag00_class*)i_this;

    tag->field_0x06 = 0;
    tag->mPSelldx = tag->mBase.mParameters;
    tag->mEffectMode = tag->mBase.mParameters >> 8;
    tag->mParamRadius = tag->mBase.mParameters >> 0x10 & 0xFF;
    tag->mInnerFadeY = tag->mBase.mParameters >> 0x18;
    tag->mSwitchId = tag->current.angle.x;
    tag->mbInvert = tag->current.angle.x >> 8 & 0xFF;
    tag->mbAlwaysCheckPlayerPos = tag->current.angle.z;


    if (tag->mbInvert == 0) {
        if (tag->mSwitchId == 0xff || dComIfGs_isSwitch(dStage_roomControl_c::mStayNo, dStage_roomControl_c::mStayNo) != 0) {
            tag->mTarget = 0.0f;
        }
        else {
            tag->mTarget = 1.0f;
        }
    }
    else if (tag->mSwitchId == 0xff || dComIfGs_isSwitch(dStage_roomControl_c::mStayNo, dStage_roomControl_c::mStayNo) != 0) {
        tag->mTarget = 1.0f;
    }
    else {
        tag->mTarget = 1.0f;
    }
    if ((int)tag->mParamRadius == 0xff) {
        tag->mParamRadius = 10;
    }
    if ((int)tag->mInnerFadeY == 0xff) {
        tag->mInnerFadeY = 10;
    }
    if (tag->mbAlwaysCheckPlayerPos == 0) {
        tag->mInnerRadius = tag->mScale.x * 5000.0f;
        tag->mOuterRadius =
            tag->mScale.x * 5000.0f + (float)(int)tag->mParamRadius * 100.0f;
    }
    else {
        tag->mInnerRadius = tag->mScale.x * 500.0f;
        tag->mOuterRadius = tag->mScale.x * 500.0f + (float)(int)tag->mParamRadius * 30.0f;
    }
    tag->mbEfSet = 0;
    tag->mbPselSet = 0;
    g_env_light.mMoyaCount = 0;
    wether_tag_efect_move(tag);
    return 4;
}


static actor_method_class l_kytag00__Method = {
    (process_method_func)daKytag00_Execute,
    (process_method_func)daKytag00_Draw,
    (process_method_func)daKytag00_IsDelete,
    (process_method_func)daKytag00_Delete,
    (process_method_func)daKytag00_Create
};


extern actor_process_profile_definition g_profile_KYTAG00 = {
    fpcLy_CURRENT_e,
    7,
    fpcLy_CURRENT_e,
    PROC_KYTAG00,
    &g_fpcLf_Method.mBase,
    sizeof(kytag00_class),
    0,
    0,
    &g_fopAc_Method.base,
    0xA6,
    &l_kytag00__Method,
    0x00044000,
    fopAc_ACTOR_e,
    fopAc_CULLBOX_0_e,
};


